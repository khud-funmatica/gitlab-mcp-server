#!/usr/bin/env node

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';

class HelloWorldMCPServer {
  constructor() {
    this.server = new Server(
      {
        name: 'hello-world-mcp-server',
        version: '0.0.1',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupToolHandlers();
  }

  setupToolHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É–ª–∑
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
          {
            name: 'hello_world',
            description: '–ü—Ä–æ—Å—Ç–∞—è —Ç—É–ª–∑–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
            inputSchema: {
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                  description: '–ò–º—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
                },
              },
            },
          },
        ],
      };
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—É–ª–∑
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      if (request.params.name === 'hello_world') {
        const name = request.params.arguments?.name || '–ú–∏—Ä';
        return {
          content: [
            {
              type: 'text',
              text: `–ü—Ä–∏–≤–µ—Ç, ${name}! –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç! üéâ`,
            },
          ],
        };
      }

      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—É–ª–∑–∞: ${request.params.name}`);
    });
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('Hello World MCP Server –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = new HelloWorldMCPServer();
server.run().catch(console.error);
